type salesforce.Flow {
  annotations {
    serviceid metadataType {
    }
    boolean hasMetaFile {
    }
    string folderType {
    }
    string folderContentType {
    }
    string suffix {
    }
    string dirName {
    }
  }
  serviceid fullName {
  }
  salesforce.FlowActionCall actionCalls {
  }
  salesforce.FlowApexPluginCall apexPluginCalls {
  }
  number apiVersion {
  }
  "List<salesforce.FlowAssignment>" assignments {
  }
  salesforce.FlowChoice choices {
  }
  salesforce.FlowCollectionProcessor collectionProcessors {
  }
  "List<salesforce.FlowConstant>" constants {
  }
  "List<salesforce.FlowDecision>" decisions {
  }
  string description {
  }
  salesforce.FlowDynamicChoiceSet dynamicChoiceSets {
  }
  string environments {
    _restriction = {
      enforce_value = false
      values = [
        "Default",
        "Slack",
      ]
    }
  }
  "List<salesforce.FlowFormula>" formulas {
  }
  string interviewLabel {
  }
  boolean isAdditionalPermissionRequiredToRun {
  }
  boolean isOverridable {
  }
  boolean isTemplate {
  }
  string label {
  }
  "List<salesforce.FlowLoop>" loops {
  }
  string migratedFromWorkflowRuleName {
  }
  salesforce.FlowOrchestratedStage orchestratedStages {
  }
  string overriddenFlow {
    _restriction = {
      enforce_value = false
      values = [
        "omnichannel_chat__QueuesChat",
        "omnichannel_chat__SkillsChat",
        "omnichannel_messaging__MsgRouting",
        "omnichannel_voice__VoiceRouting",
        "runtime_appointmentbooking__Flow",
        "runtime_appointmentbooking__Guest_Flow",
        "runtime_appointmentbooking__In_Cancel",
        "runtime_appointmentbooking__In_Modify",
        "runtime_appointmentbooking__In_New",
        "runtime_appointmentbooking__Inv_Book",
        "runtime_appointmentbooking__Inv_Gen",
        "runtime_appointmentbooking__Out_Modify",
        "runtime_commerce_adj__Discount_Item",
        "runtime_commerce_exc__Exchange_Flow",
        "runtime_commerce_oms__Cancel_Item",
        "runtime_commerce_oms__Create_OS",
        "runtime_commerce_oms__Create_PE",
        "runtime_commerce_oms__Return_Item",
        "runtime_commerce_rma__Create_CO",
        "runtime_commerce_rma__Return_Item_RMA",
        "runtime_commerce_rs__Reship_FO",
        "runtime_industries_recurrence__Orch",
        "runtime_industries_recurrence__Schdlr",
        "runtime_service_incident_mgmt__CCOIO",
        "runtime_service_incident_mgmt__CRRI",
        "setup_service_experience__Create_Case",
        "setup_service_experience__Reset_Pwd",
        "setup_service_experience__Verify_Cust",
      ]
    }
    foreignKeyDomain = [
      "FlowDefinition",
    ]
  }
  "List<salesforce.FlowMetadataValue>" processMetadataValues {
  }
  string processType {
    _restriction = {
      enforce_value = false
      values = [
        "ActionCadenceFlow",
        "ActionPlan",
        "Appointments",
        "AutoLaunchedFlow",
        "CMSOrchestrator",
        "CartAsyncFlow",
        "CheckoutFlow",
        "ContactRequestFlow",
        "CustomEvent",
        "CustomerLifecycle",
        "DigitalForm",
        "EvaluationFlow",
        "FSCLending",
        "FieldServiceMobile",
        "FieldServiceWeb",
        "Flow",
        "InvocableProcess",
        "Journey",
        "JourneyBuilderIntegration",
        "LoginFlow",
        "LoyaltyManagementFlow",
        "ManagedContentFlow",
        "OfflineFlow",
        "OrchestrationFlow",
        "Orchestrator",
        "RecommendationStrategy",
        "RoutingFlow",
        "ServiceCatalogItemFlow",
        "Survey",
        "SurveyEnrich",
        "TransactionSecurityFlow",
        "UserProvisioningFlow",
        "Workflow",
      ]
    }
  }
  "List<salesforce.FlowRecordCreate>" recordCreates {
  }
  salesforce.FlowRecordDelete recordDeletes {
  }
  "List<salesforce.FlowRecordLookup>" recordLookups {
  }
  salesforce.FlowRecordRollback recordRollbacks {
  }
  "List<salesforce.FlowRecordUpdate>" recordUpdates {
  }
  string runInMode {
    _restriction = {
      enforce_value = false
      values = [
        "DefaultMode",
        "SystemModeWithSharing",
        "SystemModeWithoutSharing",
      ]
    }
  }
  salesforce.FlowScreen screens {
  }
  string sourceTemplate {
    _restriction = {
      enforce_value = false
      values = [
        "omnichannel_chat__QueuesChat",
        "omnichannel_chat__SkillsChat",
        "omnichannel_messaging__MsgRouting",
        "omnichannel_voice__VoiceRouting",
        "runtime_appointmentbooking__Flow",
        "runtime_appointmentbooking__Guest_Flow",
        "runtime_appointmentbooking__In_Cancel",
        "runtime_appointmentbooking__In_Modify",
        "runtime_appointmentbooking__In_New",
        "runtime_appointmentbooking__Inv_Book",
        "runtime_appointmentbooking__Inv_Gen",
        "runtime_appointmentbooking__Out_Modify",
        "runtime_commerce_adj__Discount_Item",
        "runtime_commerce_exc__Exchange_Flow",
        "runtime_commerce_oms__Cancel_Item",
        "runtime_commerce_oms__Create_OS",
        "runtime_commerce_oms__Create_PE",
        "runtime_commerce_oms__Return_Item",
        "runtime_commerce_rma__Create_CO",
        "runtime_commerce_rma__Return_Item_RMA",
        "runtime_commerce_rs__Reship_FO",
        "runtime_industries_recurrence__Orch",
        "runtime_industries_recurrence__Schdlr",
        "runtime_service_incident_mgmt__CCOIO",
        "runtime_service_incident_mgmt__CRRI",
        "setup_service_experience__Create_Case",
        "setup_service_experience__Reset_Pwd",
        "setup_service_experience__Verify_Cust",
      ]
    }
    foreignKeyDomain = [
      "FlowDefinition",
    ]
  }
  salesforce.FlowStage stages {
  }
  salesforce.FlowStart start {
  }
  string startElementReference {
  }
  string status {
    _restriction = {
      enforce_value = false
      values = [
        "Active",
        "Draft",
        "InvalidDraft",
        "Obsolete",
      ]
    }
  }
  salesforce.FlowStep steps {
  }
  salesforce.FlowSubflow subflows {
  }
  salesforce.FlowTextTemplate textTemplates {
  }
  number triggerOrder {
  }
  "List<salesforce.FlowVariable>" variables {
  }
  salesforce.FlowWait waits {
  }
  string internalId {
    _hidden_value = true
    localOnly = true
  }
  suffix = "flow"
  dirName = "flows"
  metadataType = "Flow"
}
